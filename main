import time as t
import turtle

def drawTurtleBoard():
    turtle.Screen()
    turtle.screensize(100, 100)
    turtle.speed(0)
    turtle.hideturtle()
    #Draw first vertical line
    turtle.pu()
    turtle.setheading(90)
    turtle.goto(-100,0)
    turtle.pd()
    turtle.forward(130)
    turtle.setheading(270)
    turtle.forward(260)
    #Draw second vertical line
    turtle.pu()
    turtle.goto(0,0)
    turtle.setheading(90)
    turtle.pd()
    turtle.forward(130)
    turtle.setheading(270)
    turtle.forward(260)
    #Draw first horizontal line
    turtle.pu()
    turtle.goto(-200,50)
    turtle.setheading(0)
    turtle.pd()
    turtle.forward(300)
    #Draw second horizontal line
    turtle.pu()
    turtle.goto(-200,-50)
    turtle.pd()
    turtle.forward(300)
    turtle.pu()
    turtle.home()
def drawX_11():
    turtle.pensize(5)
    turtle.goto(-175,120)
    turtle.setheading(315)
    turtle.pd()
    turtle.forward(75)
    turtle.pu()
    turtle.goto(-120,120)
    turtle.setheading(225)
    turtle.pd()
    turtle.forward(75)
    turtle.hideturtle()
def drawX_12():
    turtle.showturtle()
    turtle.pu()
    turtle.pensize(5)
    turtle.goto(-80,120)
    turtle.setheading(315)
    turtle.pd()
    turtle.forward(75)
    turtle.pu()
    turtle.goto(-25,120)
    turtle.setheading(225)
    turtle.pd()
    turtle.forward(75)
    turtle.hideturtle()
def drawX_13():
    turtle.pu()
    turtle.pensize(5)
    turtle.goto(20,120)
    turtle.setheading(315)
    turtle.pd()
    turtle.forward(75)
    turtle.pu()
    turtle.goto(75,120)
    turtle.pd()
    turtle.setheading(225)
    turtle.forward(75)
def drawX_21():
    turtle.pu()
    turtle.pensize(5)
    turtle.goto(-175, 25)
    turtle.setheading(315)
    turtle.pd()
    turtle.forward(75)
    turtle.pu()
    turtle.goto(-120, 25)
    turtle.setheading(225)
    turtle.pd()
    turtle.forward(75)
    turtle.hideturtle()
def drawX_22():
    turtle.pu()
    turtle.pensize(5)
    turtle.goto(-80, 25)
    turtle.setheading(315)
    turtle.pd()
    turtle.forward(75)
    turtle.pu()
    turtle.goto(-25, 25)
    turtle.setheading(225)
    turtle.pd()
    turtle.forward(75)
    turtle.hideturtle()
def drawX_23():
    turtle.pu()
    turtle.pensize(5)
    turtle.goto(20, 25)
    turtle.setheading(315)
    turtle.pd()
    turtle.forward(75)
    turtle.pu()
    turtle.goto(75, 25)
    turtle.pd()
    turtle.setheading(225)
    turtle.forward(75)
def drawX_31():
    turtle.pu()
    turtle.pensize(5)
    turtle.goto(-175, -65)
    turtle.setheading(315)
    turtle.pd()
    turtle.forward(75)
    turtle.pu()
    turtle.goto(-120, -65)
    turtle.setheading(225)
    turtle.pd()
    turtle.forward(75)
    turtle.hideturtle()
def drawX_32():
    turtle.pu()
    turtle.pensize(5)
    turtle.goto(-80, -65)
    turtle.setheading(315)
    turtle.pd()
    turtle.forward(75)
    turtle.pu()
    turtle.goto(-25, -65)
    turtle.setheading(225)
    turtle.pd()
    turtle.forward(75)
    turtle.hideturtle()
def drawX_33():
    turtle.pu()
    turtle.pensize(5)
    turtle.goto(20, -65)
    turtle.setheading(315)
    turtle.pd()
    turtle.forward(75)
    turtle.pu()
    turtle.goto(75, -65)
    turtle.pd()
    turtle.setheading(225)
    turtle.forward(75)
def drawBoard():
    print(player1,"score: ",player1Score,"|",player2,"score: ",player2Score)
    print(game[0][0], "|", game[0][1], "|", game[0][2])
    print("---------")
    print(game[1][0], "|", game[1][1], "|", game[1][2])
    print("---------")
    print(game[2][0], "|", game[2][1], "|", game[2][2])
def restartBoard():
    for i in range(len(game)):
        for j in range(len(game)):
            game[i][j] = " "
def availMove():
    count = 9
    for i in range(len(game)):
        for j in range(len(game)):
            if(game[i][j] == 'X' or game[i][j] == "O"):
                count -=1
                if(count <= 0):
                    drawBoard()
                    print()
                    t.sleep(2)
                    print("There are no more possible moves.\nRestarting game.\n")
                    t.sleep(2)
                    restartBoard()
                    drawBoard()
                    print("\n", player1, "enter your move.")
                    row = int(input()) - 1
                    col = int(input()) - 1
                    print("\n")
                    game[row][col] = 'X'
def openSpot(num1,num2,letter):
    if(game[num1][num2] == "X" or game[num1][num2] == "O"):
        drawBoard()
        print("\nThat spot is being used already please try again.\n")
        row = int(input())-1
        col = int(input())-1
        openSpot(row,col,letter)
        game[row][col] == letter

game = [[' ',' ',' '],
        [' ',' ',' '],
        [' ',' ',' ']]
player1Score = 0
player2Score = 0
winner = False
response = 'y'
drawTurtleBoard()
drawX_11()
drawX_12()
drawX_13()
drawX_21()
drawX_22()
drawX_23()
drawX_31()
drawX_32()
drawX_33()
print("Enter player 1's name.")
player1 = input().capitalize()
print("Enter play 2's name.")
player2 = input().capitalize()
print("To play you use 2 numbers. The first number is the row, the second is the column."
      "\ni.e(1 'enter' 1 'enter' will put an X on the top left corner)\n\n")
while(winner == False):
    drawBoard()
    drawTurtleBoard()
    print("\n",player1,"enter your move.")
    row = int(input())-1
    col = int(input())-1
    print("\n")
    openSpot(row,col,"X")
    game[row][col]='X'
    availMove()
    if ((game[0][0] == "X" and game[0][1] == "X" and game[0][2] == "X")
        or (game[0][0] == "X" and game[1][1] == "X" and game[2][2] == "X")
        or (game[0][2] == "X" and game[1][1] == "X" and game[2][0] == "X")
        or (game[0][1] == "X" and game[1][1] == "X" and game[2][1] == "X")
        or (game[1][0] == "X" and game[1][1] == "X" and game[1][2] == "X")
        or (game[2][0] == "X" and game[2][1] == "X" and game[2][2] == "X")
        or (game[0][0] == "X" and game[1][0] == "X" and game[2][0] == "X")
        or (game[0][2] == "X" and game[1][2] == "X" and game[2][2] == "X")):
        print(player1, "wins!")
        player1Score += 1
        drawBoard()
        winner = True
        if(winner == True):
            print("Rematch?")
            response = input()
            if(response == "y"):
                restartBoard()
                drawBoard()
                winner = False
                print("\n", player1, "enter your move.")
                row = int(input()) - 1
                col = int(input()) - 1
                print("\n")
                game[row][col] = 'X'
                drawBoard()
            else:
                print("Good game!",player1,"and",player2)
                break
    drawBoard()
    print("\n",player2,"enter your move.")
    row = int(input())-1
    col = int(input())-1
    print("\n")
    openSpot(row,col,"O")
    game[row][col]="O"
    availMove()
    if ((game[0][0] == "O" and game[0][1] == "O" and game[0][2] == "O")
        or (game[0][0] == "O" and game[1][1] == "O" and game[2][2] == "O")
        or (game[0][2] == "O" and game[1][1] == "O" and game[2][0] == "O")
        or (game[0][1] == "O" and game[1][1] == "O" and game[2][1] == "O")
        or (game[1][0] == "O" and game[1][1] == "O" and game[1][2] == "O")
        or (game[2][0] == "O" and game[2][1] == "O" and game[2][2] == "O")
        or (game[0][0] == "O" and game[1][0] == "O" and game[2][0] == "O")
        or (game[0][2] == "O" and game[1][2] == "O" and game[2][2] == "O")):
        print(player2, "wins!")
        player2Score += 1
        drawBoard()
        winner = True
        if(winner == True):
            print("Rematch?")
            response = input()
            if(response == "y"):
                restartBoard()
                winner = False
                drawBoard()
                print("\n", player2, "enter your move.")
                row = int(input()) - 1
                col = int(input()) - 1
                print("\n")
                game[row][col] = 'O'
                drawBoard()
            else:
                print("Good game!",player1,"and",player2)
                break
